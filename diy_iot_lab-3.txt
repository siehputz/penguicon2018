<<<
== LAB 3 ::  MQTT with an incremented number for testing


. Click on 'File->Examples->Adafruit MQTT Library->mqtt_esp8266'
. Read through the source code. Note that this example was written to use a specific MQTT broker (io.adafruit.com) (most MQTT Brokers are compatible).  We are going to communicate with a local MQTT Broker called Mosquitto . 
.  Configure the ESP8266 Wifi to use the local lab network.  Change the program  at lines 24 and 25 
** WLAN_SSID: iotlab    (SSID of our created lab network) 
** WLAN_PASS: iotlabpass    (PASS of our created lab network)
. Configure the ESP8266 to communicate to a MQTT server.   You will use a MQTT Broker that is on the local  iotlab network.  Change line 29 and 31 
** AIO_SERVER
*** Use your station 192.168.x.x ipaddress
//*** Use IP Address  192.168.10.200
**** “ip addr” to get ip addresses of your station in a terminal window
** AIO_USERNAME
*** User your station name
**  AIO_KEY (empty)
.  Change the name of your MQTT topic, which is done in the call to 
** Adafruit_MQTT_Publish().    Line 48
*** Change the name to “temp”
*** Change the literal from “feeds/photocell” to “feeds/temp”
[width="60%", cols="m"]
|==============================================
| Adafruit_MQTT_Publish photocell = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/photocell");
|==============================================

** to
[width="60%", cols="m"]
|==============================================
| Adafruit_MQTT_Publish temp = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/temp");
|==============================================

. Change line 107 to call "temp.publish" instead of "photocell.publish" since we changed the name to temp earlier .   
[width="60%", cols="m"]
|==============================================
| if (! photocell.publish(x++)) { 
|==============================================

** to
[width="60%", cols="m"]
|==============================================
| if (! temp.publish(x++)) { 
|==============================================

. Put in a 15-second delay between each publishing 
. Click on 'File->Save As'   to save this version
. Compile and upload the sketch(program) 
. Keep the serial monitor window open so you can see any displayed messages or errors
. You should now be publishing the resukt of 'x++' to a 'mosquitto MQTT broker' on your lab station 
//. You should now be publishing 'x++' to a 'mosquitto MQTT broker' on the iotlab network 
. You can check this by
** Switch to the “iotlab” network by going to “Network Manager” Icon at top right of screen and selecting 
*** SSID “iotlab”
*** PASS “iotlabpass” 
** open a terminal window on the system and entering the command
//** open a terminal window and 'ssh' to the 'mqtt broker system' as define in AIO_SERVER and then  enter the command.  You will only see data when the ESP8266 actually sends data
[listing]
mosquitto_sub -h localhost -v -u stationxx -P stationxxpass -t '#'   

*** where xx is your station number


//mosquitto_sub -h 192.168.10.200 -v -t ''<Your station name as entered in AIO_USERNAME>/#''    
//mosquitto_sub -h 192.168.10.200 -v -t ''station12/#''    

NOTE:
-------------------------------------------
 -h localhost  -- <name/ipaddress of mqtt broker system>
 -v            -- <verbose>
 -t '#'        -- <topic> '#' means all topics
-------------------------------------------

// vim: set syntax=asciidoc:
